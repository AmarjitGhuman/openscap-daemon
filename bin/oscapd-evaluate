#!/usr/bin/python

# Copyright 2016 Red Hat Inc., Durham, North Carolina.
# All Rights Reserved.
#
# openscap-daemon is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 2.1 of the License, or
# (at your option) any later version.
#
# openscap-daemon is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.

# You should have received a copy of the GNU Lesser General Public License
# along with openscap-daemon.  If not, see <http://www.gnu.org/licenses/>.
#
# Authors:
#   Martin Preisler <mpreisle@redhat.com>

from openscap_daemon import config as config_
from openscap_daemon import evaluation_spec
from openscap_daemon import oscap_helpers
from openscap_daemon import cli_helpers
from openscap_daemon import version

import os
import os.path
import logging
import argparse
import sys
import threading
import io
import json
import datetime

if sys.version_info < (3,):
    import Queue
else:
    import queue as Queue


def cli_scan(args, config):
    assert(os.path.isdir(args.output))

    output_dir_map = {}
    targets = cli_helpers.preprocess_targets(args.targets, output_dir_map)

    queue = Queue.Queue(len(targets))
    for target in targets:
        queue.put_nowait(target)

    scanned_targets = []
    failed_targets = []

    def scan_worker():
        while True:
            try:
                target = queue.get(False)

                if len(failed_targets) > 0:
                    failed_targets.append(target)
                    queue.task_done()
                    continue

                cve_results = None
                standard_scan_results = None

                logging.debug("Started scanning target '%s'", target)
                started_time = None
                finished_time = None

                try:
                    started_time = datetime.datetime.now()
                    cpes = []
                    try:
                        cpes = evaluation_spec.EvaluationSpec.\
                            detect_CPEs_of_target(target, config)
                    except:
                        logging.exception(
                            "Failed to detect CPEs of target '%s'. "
                            "Assuming no CPEs..." % (target)
                        )

                    if not args.no_cve_scan:
                        es = evaluation_spec.EvaluationSpec()
                        es.mode = oscap_helpers.EvaluationMode.CVE_SCAN
                        es.target = target
                        es.cpe_hints = cpes
                        try:
                            cve_results, stdout, stderr, exit_code = \
                                es.evaluate(config)

                            if exit_code == 1:
                                logging.warning(
                                    "CVE scan of target '%s' failed with "
                                    "exit_code %i.\n\nstdout:%s\n\nstderr:%s" %
                                    (target, exit_code, stdout, stderr)
                                )
                        except:
                            logging.exception(
                                "Failed to scan target '%s' for "
                                "vulnerabilities." % (target)
                            )

                    if not args.no_standard_compliance:
                        es = evaluation_spec.EvaluationSpec()
                        es.mode = oscap_helpers.EvaluationMode.STANDARD_SCAN
                        es.target = target
                        es.cpe_hints = cpes
                        try:
                            standard_scan_results, stdout, stderr, exit_code = \
                                es.evaluate(config)

                            if exit_code == 1:
                                logging.warning(
                                    "Standard compliance scan of target '%s' "
                                    "failed with exit_code %i.\n\nstdout:%s\n\n"
                                    "stderr:%s" %
                                    (target, exit_code, stdout, stderr)
                                )

                        except:
                            logging.exception(
                                "Failed to scan target '%s' for "
                                "standard profile compliance." % (target)
                            )

                    finished_time = datetime.datetime.now()

                except Exception as e:
                    logging.exception(e)
                    failed_targets.append(target)

                queue.task_done()
                scanned_targets.append(
                    (target, cve_results, standard_scan_results,
                        started_time, finished_time)
                )

                percent = "{0:6.2f}%".format(
                    float(len(scanned_targets) * 100) / len(targets)
                )

                logging.info("[%s] Scanned target '%s'", percent, target)

            except Queue.Empty:
                break

    assert(args.jobs > 0)

    workers = []
    for worker_id in range(args.jobs):
        worker = threading.Thread(
            name="Atomic scan worker #%i" % (worker_id),
            target=scan_worker
        )
        workers.append(worker)
        worker.start()

    try:
        queue.join()

    except KeyboardInterrupt:
        failed_targets.append(None)

        for worker in workers:
            worker.join()

        sys.stderr.write("Evaluation interrupted by user!\n")

    if len(failed_targets) > 0:
        sys.stderr.write(
            "Fatal error encountered while evaluating! Failed to evaluate "
            "at least %i targets!\n" % (len(failed_targets) - 1)
        )

    for target, cve_results, standard_scan_results, \
            started_time, finished_time in scanned_targets:
        output_dir = ""
        if target in output_dir_map:
            output_dir = output_dir_map[target]

        else:
            output_dir = target
            output_dir = output_dir.replace(":", "_")
            output_dir = output_dir.replace("/", "_")

        json_target = target
        if json_target.startswith("chroot://"):
            json_target = json_target[len("chroot://"):]

        json_data = {}
        json_data["UUID"] = json_target
        json_data["Scanner"] = "openscap"
        json_data["Time"] = started_time.strftime("%Y-%m-%dT%H:%M:%S") \
            if started_time is not None else "unknown"
        json_data["Finished Time"] = \
            finished_time.strftime("%Y-%m-%dT%H:%M:%S") \
            if finished_time is not None else "unknown"
        json_data["Vulnerabilities"] = []
        if (args.no_cve_scan or cve_results) and \
                (args.no_standard_compliance or standard_scan_results):
            json_data["Successful"] = "true"
        else:
            json_data["Successful"] = "false"

        scan_type = []
        full_output_dir = os.path.join(args.output, output_dir)
        try:
            os.makedirs(full_output_dir)
        except OSError as e:
            if e.errno != 17:  # it's fine if it already exists
                raise

        if cve_results is not None:
            scan_type.append("CVE")

            cli_helpers.summarize_cve_results(
                cve_results, json_data["Vulnerabilities"]
            )

            with io.open(os.path.join(
                    full_output_dir, "cve.xml"), "w",
                    encoding="utf-8") as f:
                f.write(cve_results)

        if standard_scan_results is not None:
            scan_type.append("Standard Compliance")

            cli_helpers.summarize_standard_compliance_results(
                standard_scan_results, json_data["Vulnerabilities"]
            )

            with io.open(os.path.join(
                    full_output_dir, "std.xml"), "w",
                    encoding="utf-8") as f:
                f.write(standard_scan_results)

        json_data["Scan Type"] = ", ".join(scan_type)

        with open(os.path.join(
                full_output_dir, "json"), "w") as f:
            json.dump(json_data, f, indent=2)


def main():
    parser = argparse.ArgumentParser(
        description="OpenSCAP-Daemon one-off evaluator."
    )
    parser.add_argument(
        "-v", "--version", action="version",
        version="%(prog)s " + version.VERSION_STRING
    )
    parser.add_argument("--verbose",
                        help="be verbose, useful for debugging",
                        action="store_true")

    subparsers = parser.add_subparsers(dest="action")
    subparsers.required = True

    config_parser = subparsers.add_parser(
        "config",
        help="Start with default configuration, auto-detect tool and content "
             "locations and output the resulting INI results into stdout or "
             "given file path"
    )
    config_parser.add_argument(
        "--path", metavar="PATH", type=argparse.FileType("w"),
        default=sys.stdout
    )

    xml_parser = subparsers.add_parser(
        "xml",
        help="Evaluate an EvaluationSpec passed as an XML, either to stdin or "
             "as a file"
    )
    xml_parser.add_argument(
        "--path", metavar="PATH", type=argparse.FileType("r"),
        default=sys.stdin
    )
    xml_parser.add_argument(
        "--results", metavar="PATH", type=argparse.FileType("w")
    )
    xml_parser.add_argument(
        "--stdout", metavar="PATH", type=argparse.FileType("w")
    )
    xml_parser.add_argument(
        "--stderr", metavar="PATH", type=argparse.FileType("w")
    )

    spec_parser = subparsers.add_parser(
        "spec",
        help="Evaluate an EvaluationSpec created using arguments passed on "
             "the command line."
    )
    spec_parser.add_argument(
        "--mode", type=str,
        choices=["sds", "oval", "cve_scan", "standard_scan"],
        default="sds"
    )
    spec_parser.add_argument(
        "--target", type=str,
        default="localhost"
    )
    spec_parser.add_argument(
        "--input", metavar="PATH", dest="input_",
        type=lambda path: io.open(path, "r", encoding="utf-8"),
        default=sys.stdin
    )
    spec_parser.add_argument(
        "--tailoring", metavar="PATH",
        type=lambda path: io.open(path, "r", encoding="utf-8"),
    )
    spec_parser.add_argument(
        "--profile", type=str,
        default=""
    )
    spec_parser.add_argument(
        "--remediate", default=False, action="store_true"
    )
    spec_parser.add_argument(
        "--print-xml",
        dest="print_xml",
        help="Don't evaluate the EvaluationSpec, just print its XML to stdout",
        action="store_true"
    )
    spec_parser.add_argument(
        "--results", metavar="PATH",
        type=lambda path: io.open(path, "w", encoding="utf-8"),

    )
    spec_parser.add_argument(
        "--stdout", metavar="PATH",
        type=lambda path: io.open(path, "w", encoding="utf-8"),
    )
    spec_parser.add_argument(
        "--stderr", metavar="PATH",
        type=lambda path: io.open(path, "w", encoding="utf-8"),
    )
    target_cpes_parser = subparsers.add_parser(
        "target-cpes",
        help="Detect CPEs applicable on given target"
    )
    target_cpes_parser.add_argument(
        "--target", type=str,
        default="localhost"
    )
    scan_parser = subparsers.add_parser(
        "scan",
        help="Scan a list of targets for CVEs and compliance with the standard "
        "profile, return aggregated results. This is an integration shim "
        "intended for Atomic but can also be useful elsewhere."
    )
    scan_parser.add_argument(
        "--targets", type=str, nargs="+",
        default=["localhost"]
    )
    scan_parser.add_argument(
        "-j", "--jobs", type=int,
        default=4
    )
    scan_parser.add_argument(
        "--no-cve-scan", default=False, action="store_true",
        dest="no_cve_scan",
        help="Skip the CVE scan."
    )
    scan_parser.add_argument(
        "--no-standard-compliance", default=False, action="store_true",
        dest="no_standard_compliance",
        help="Skip the standard profile compliance scan."
    )
    scan_parser.add_argument(
        "--output", type=str, required=True,
        help="A directory where results will be stored in."
    )
    args = parser.parse_args()

    logging.basicConfig(format='%(levelname)s:%(message)s',
                        level=logging.DEBUG if args.verbose else logging.INFO)
    logging.info("OpenSCAP Daemon one-off evaluator %s", version.VERSION_STRING)

    if args.action == "config":
        config = config_.Configuration()
        config.autodetect_tool_paths()
        config.autodetect_content_paths()
        config.save_as(args.path)
        sys.exit(0)

    config_file = os.path.join("/", "etc", "oscapd", "config.ini")
    if "OSCAPD_CONFIG_FILE" in os.environ:
        config_file = os.environ["OSCAPD_CONFIG_FILE"]

    config = config_.Configuration()
    config.load(config_file)
    config.autodetect_tool_paths()
    config.autodetect_content_paths()
    config.prepare_dirs(cleanup_allowed=False)

    if args.action == "xml":
        spec = evaluation_spec.EvaluationSpec()
        spec.load_from_xml_file(args.path)
        results, stdout, stderr, exit_code = spec.evaluate(config)
        if args.results is not None:
            args.results.write(results)
            args.results.close()
        if args.stdout is not None:
            args.stdout.write(stdout)
            args.stdout.close()
        if args.stderr is not None:
            args.stderr.write(stderr)
            args.stderr.close()

        sys.exit(exit_code)

    elif args.action == "spec":
        spec = evaluation_spec.EvaluationSpec()
        spec.mode = oscap_helpers.EvaluationMode.from_string(args.mode)
        spec.target = args.target
        if spec.mode not in [oscap_helpers.EvaluationMode.CVE_SCAN,
                             oscap_helpers.EvaluationMode.STANDARD_SCAN]:
            spec.input_.set_contents(args.input_.read())
        if args.tailoring is not None:
            spec.tailoring.set_contents(args.tailoring.read())

        spec.profile = args.profile
        spec.online_remediation = args.remediate

        if args.print_xml:
            print(spec.to_xml_source())
            sys.exit(0)

        else:
            results, stdout, stderr, exit_code = spec.evaluate(config)
            if args.results is not None:
                args.results.write(results)
                args.results.close()
            if args.stdout is not None:
                args.stdout.write(stdout)
                args.stdout.close()
            if args.stderr is not None:
                args.stderr.write(stderr)
                args.stderr.close()

            sys.exit(exit_code)

    elif args.action == "target-cpes":
        cpes = evaluation_spec.EvaluationSpec.detect_CPEs_of_target(
            args.target, config
        )
        print("\n".join(cpes))
        sys.exit(0)

    elif args.action == "scan":
        cli_scan(args, config)


if __name__ == "__main__":
    main()
